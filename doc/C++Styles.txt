Language:
	We use C++ 11 for development.

#define Guard:
	Use <PATH>_<FILE>_<H>
	This is not a strict requirement.

Naming Files:
	.cc for C++ source files.
	.h for C++ header files.
	File name should be lowercase with underscores_ or dashes as word
	separators, e.g. 
	- my_useful_class.cc
	- my-useful-class.cc

Naming Classes:
	Classes should start with a capital letter and each word shall
	initiate with a capital letter, e.g.
	+ Parcel
	+ ParcelHandler

Naming Variables:
	All lowercase, member variables should have a underscore (_) as the
	suffix. Underscores may also be word separators, e.g.
	+ stack_variable
	+ member_variable_

	Consider abbreviations for long or frequent occurring names. If the
	meaning of the abbreviations is unclear to everyone, put comment in the
	code or under document directory.

Naming Macros:
	All uppercase with underscore word separators.

Naming Function:
	All lowercase with underscore word separators.

Comments:
	// for single line comments, /* */ for multi-line comments.
	Do NOT use comments to disable part of code. Use #if 0 #endif pairs
	instead.
	Use TODO in comments to mark up things we do not handle currently.

Indention:
	Use tabs only to indent the code, which allows developers to choose the
	width of indentions.

Braces and statements
	Left braces should NOT start a newline, the only exception is function
	definition.

	Else statement shall not start a new line.

	e.g.
	class c {
		void func()
		{
			if (...) {
				for (...) {
				};
			} else {
				call();
			}
			return ;
		}
	}

	The principle is to keep the code compact, since we only has limited number of lines on screen.

Spaces around Brackets and operators: 
	FunctionCall(offset[x] * y + base[z], x, y, z);
